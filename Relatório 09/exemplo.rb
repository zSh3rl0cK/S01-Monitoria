# ===============================================
# M√ìDULOS (Interfaces / Contratos de Comportamento)
# ===============================================

# M√≥dulo que define que um objeto pode queimar o Cosmo (Interface)
module CapacidadeCosmo
  # M√©todo que DEVE ser implementado pela classe que incluir o m√≥dulo
  def queimar_cosmo
    raise NotImplementedError, "#{self.class} deve implementar o m√©todo 'queimar_cosmo'"
  end
end

# M√≥dulo para habilidades de defesa
module CapacidadeDefensiva
  def defender
    puts "üõ°Ô∏è Defesa c√≥smica ativada!"
  end
end

# ===============================================
# CLASSE COMPONENTE (PARTE da Composi√ß√£o)
# ===============================================

# Representa a Armadura (ou "Kamei") que √© parte essencial do Cavaleiro
class Armadura
  attr_reader :nome, :material

  # Construtor do Componente
  def initialize(nome, material)
    @nome = nome
    @material = material
  end

  def mostrar_detalhes
    "Armadura de #{@nome}, feita de #{@material}."
  end
end

# ===============================================
# CLASSE BASE: Guerreiro (Heran√ßa e Encapsulamento)
# ===============================================
class Guerreiro
  # Encapsulamento: attr_reader cria apenas o getter (somente leitura)
  attr_reader :nome, :constelacao

  # Encapsulamento: Atributo privado/protegido por conven√ß√£o
  def initialize(nome, constelacao, forca_inicial)
    @nome = nome
    @constelacao = constelacao
    @_forca = forca_inicial # Conven√ß√£o de atributo para uso interno
  end

  # Getter expl√≠cito para o atributo de uso interno
  def forca
    @_forca
  end
  
  # Setter expl√≠cito com l√≥gica de valida√ß√£o
  def forca=(novo_valor)
    @_forca = novo_valor if novo_valor.is_a?(Numeric) && novo_valor.positive?
  end

  # M√©todo para ser sobrescrito (Polimorfismo)
  def atacar
    puts "üí• #{nome} desfere um golpe b√°sico!"
  end
end

# ===============================================
# CLASSE DERIVADA: Cavaleiro (Heran√ßa, M√≥dulos e Composi√ß√£o)
# ===============================================
class Cavaleiro < Guerreiro
  # Inclui os M√≥dulos (Interfaces)
  include CapacidadeCosmo
  include CapacidadeDefensiva

  # Atributo que armazena o objeto Armadura (Composi√ß√£o)
  attr_accessor :armadura

  # Construtor do Cavaleiro (Chama o initialize do pai com 'super')
  def initialize(nome, constelacao, forca_inicial, nome_armadura, material_armadura)
    super(nome, constelacao, forca_inicial) # Chama initialize de Guerreiro

    # Composi√ß√£o: A armadura √© criada junto com o Cavaleiro.
    @armadura = Armadura.new(nome_armadura, material_armadura)
    puts "‚ú® #{nome} surge com a #{@armadura.nome}."
  end

  # Polimorfismo: Sobrescrita do m√©todo atacar do Guerreiro
  def atacar
    puts "‚òÑÔ∏è #{nome} usa o poder da sua constela√ß√£o #{constelacao}!"
    puts "  [B√¥nus da Armadura: #{@armadura.material}]" # Uso do componente
  end

  # Implementa√ß√£o do m√©todo abstrato do M√≥dulo CapacidadeCosmo
  def queimar_cosmo
    puts "üî• O Cosmo de #{nome} queima! Poder atual: #{forca * 5}"
  end
end

# ===============================================
# CLASSE DE AGREGA√á√ÉO: ExercitoDeAtena (Collections)
# ===============================================
class ExercitoDeAtena
  # Agrega√ß√£o: Recebe uma cole√ß√£o de Cavaleiros (Array)
  attr_accessor :cavaleiros

  def initialize(cavaleiros = [])
    @cavaleiros = cavaleiros # Agrega√ß√£o: Os Cavaleiros j√° existiam fora do Ex√©rcito.
  end

  # Uso de Collections (.each)
  def iniciar_batalha(tecnica)
    puts "\n--- Ex√©rcito de Atena Inicia a Batalha com: #{tecnica} ---"
    @cavaleiros.each do |c|
      c.atacar # Polimorfismo: Chama o 'atacar' espec√≠fico de cada Cavaleiro
    end
  end

  # Uso de Collections (.select) para filtrar objetos com certo m√≥dulo
  def listar_com_defesa
    puts "\n--- Cavaleiros com Capacidade Defensiva ---"
    
    # Filtra (select) apenas os objetos que respondem ao m√©todo 'defender'
    defensores = @cavaleiros.select { |c| c.respond_to?(:defender) } 
    
    defensores.each(&:defender) # Uso do & para chamar o m√©todo
  end
end

# ===============================================
# EXECU√á√ÉO DA DEMONSTRA√á√ÉO
# ===============================================

# 1. Cria√ß√£o e Encapsulamento
seiya = Cavaleiro.new("Seiya", "P√©gaso", 1000, "P√©gaso", "Bronze")
shiryu = Cavaleiro.new("Shiryu", "Drag√£o", 1200, "Drag√£o", "Bronze")
saga = Guerreiro.new("Saga", "G√™meos", 5000) # Um guerreiro base sem armadura espec√≠fica

# Testando Encapsulamento/Setter (A forca s√≥ pode ser alterada via setter)
seiya.forca = 1100
puts "\nSeiya agora tem #{seiya.forca} de for√ßa. (Leitura via Getter)"

# 2. Polimorfismo e M√≥dulos (Interfaces)
puts "\n--- Demonstra√ß√£o de Habilidades ---"
seiya.queimar_cosmo # M√©todo implementado do M√≥dulo CapacidadeCosmo
seiya.defender      # M√©todo do M√≥dulo CapacidadeDefensiva
# saga.queimar_cosmo # <-- Isso daria erro, pois Guerreiro n√£o inclui o m√≥dulo!

# 3. Composi√ß√£o
puts "\nDetalhes da Composi√ß√£o:"
puts seiya.armadura.mostrar_detalhes # Acesso √† Armadura (Componente)

# 4. Agrega√ß√£o e Collections
exercito = ExercitoDeAtena.new([seiya, shiryu]) # Agrega√ß√£o de Cavaleiros

# Demonstra√ß√£o de Polimorfismo em Cole√ß√µes (.each)
exercito.iniciar_batalha("T√©cnicas Secretas")

# Demonstra√ß√£o de Collections avan√ßadas (.select) com M√≥dulos
exercito.listar_com_defesa
